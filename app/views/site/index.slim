h1 = site.fn

form method="post" action=site.route("sync")
	button type="submit" Sync & Build

- if !ENV["SITE_PATH"] && policy(site).destroy?
	form method="post" action=site.route
		input type="hidden" name="_method" value="DELETE"
		button type="submit" Delete this site

- if site.cloned? && policy(site).update?
	- unless site.makefile?
		p.error YOU DO NOT HAVE A MAKEFILE. THIS IS VERY BAD.
		form method="post" action=site.route("files/Makefile")
			label
				| Select your build system
				select name="build_system"
					option value="jekyll" Jekyll
			button type="submit" Add a default Makefile

	- if site.show_config_warning? && !site.config_file.exist?
		p.error You do not have a .tint.yml file. This is not terrible, but maybe you should add one.

		.card
			form method="post" action=site.route("files/.tint.yml")
				label
					| Select your build system
					select name="build_system"
						option value="jekyll" Jekyll
				button type="submit" Add a default .tint.yml

			form method="post" action=site.route
				input type="hidden" name="_method" value="PUT"
				input type="hidden" name="show_config_warning" value="false"
				button type="submit" Stop telling me about this

- if !site.valid_config?
	p.error We were unable to parse your .tint.yml file.

- if [:build_failed, :build_errored].include?(site.status)
	p.error Your most recent build failed.
- elsif [:build_created, :build_received, :build_started].include?(site.status)
	p You have a build running...
- elsif site.status == :clone_failed
	p.error We were unable to clone your site. Please make sure the repository exists.
- elsif !site.cloned?
	p Please wait, we are syncing your remote...

- if policy(site).update?
	form method="post" action=site.route
		input type="hidden" name="_method" value="PUT"

		label
			| Name
			input type="text" name="fn" value=site.fn

		label
			| Remote
			input type="text" name="remote" value=site.remote

		label
			| Subdomain
			input type="text" name="subdomain" value=site.subdomain

		button type="submit" Update

- unless ENV["SITE_PATH"] || site.cloned?
	section
		h1 Setup
		p Add access for this SSH public key to your remote:
		code = site.ssh_public_key_path.read
		p And add this script as a post-receive hook:
		pre
			code
				= open('templates/post-receive').read.gsub(/http:\/\/localhost:9292\/1\//, ENV.fetch('APP_URL') + "#{site.route}")

- if site.cloned?
	section
		h1 Site History

		== render_log log: site.log, route: site.route("files"), button: "revert"
